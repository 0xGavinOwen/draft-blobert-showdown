/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface, BigNumberish, uint256 } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { Direction, stringToFelt } from "../../utils";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {

    
    function lobby() {
        const contract_name = "lobby";

        const register_player = async (
            { account, name }: 
            { 
                account: AccountInterface;
                name: string;
             }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "register_player",
                    [stringToFelt(name)]
                );
            } catch (error) {
                console.error("Error executing register_player:", error);
                throw error;
            }
        };

        const choose_blobert = async (
            {   account, 
                blobert_1, 
                blobert_2, 
                blobert_3, 
                blobert_4, 
                blobert_5, 
                blobert_6 
             }: 
            { 
                account: AccountInterface;
                blobert_1: number;
                blobert_2: number;
                blobert_3: number;
                blobert_4: number;
                blobert_5: number;
                blobert_6: number;
             }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "choose_blobert",
                    [blobert_1, blobert_2, blobert_3, blobert_4, blobert_5, blobert_6]
                );
            } catch (error) {
                console.error("Error executing choose_blobert:", error);
                throw error;
            }
        };

        const find_battle = async (
            {   
                account, 
                challenged, 
                message, 
                wager_coin, 
                wager_value, 
                expire_seconds }: 
            { 
                account: AccountInterface;
                challenged: bigint;
                message: string;
                wager_coin: number;
                wager_value: bigint;
                expire_seconds: number;
             }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "find_battle",
                    [challenged, stringToFelt(message), wager_coin, uint256.bnToUint256(wager_value), expire_seconds]
                );
            } catch (error) {
                console.error("Error executing find_battle:", error);
                throw error;
            }
        }

        return { choose_blobert, register_player, find_battle };
    }

    function battleSystem() {
        const contract_name = "battleSystem";

        const _assert_challenge = async (
            { account, caller, game_id, round_number }: 
            { 
                account: AccountInterface;
                caller: Account;
                game_id: bigint;
                round_number: bigint; 
             }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "_assert_challenge",
                    []
                );
            } catch (error) {
                console.error("Error executing _assert_challenge:", error);
                throw error;
            }
        };

        return { _assert_challenge };
    }
    return {
        lobby: lobby(),
        battleSystem: battleSystem(),
    };
}
